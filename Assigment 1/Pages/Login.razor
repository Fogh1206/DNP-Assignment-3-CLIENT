@page "/login"
@using Assigment_1.Data
@namespace LoginComponent
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<AuthorizeView>
    <NotAuthorized>
        <div id="block_container">
             <label >User name:</label>
                <input type="text" placeholder="user name" @bind-value="username"/>
                <label >Password:</label>
                <input type="password" placeholder="password" @bind-value="password"/>
                <div style="color:red">@errorMessage</div>
                <input type="submit" value="Login" @onclick="PerformLogin">
                <input type="submit" value="Register" @onclick="PerformRegister">
        </div>
    </NotAuthorized>
    <Authorized>
        <input type="submit" value="Log out, @context.User.Identity.Name" @onclick="PerformLogout">
    </Authorized>
</AuthorizeView>

@code {
    private string username;
    private string password;
    private string errorMessage;


    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Login");
    }

    private async Task PerformLogin()
    {
        errorMessage = "";
        try
        {
            await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateLogin(username, password);
            username = "";
            password = "";
            NavigationManager.NavigateTo("/fetchdata");
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }

    public async Task PerformLogout()
    {
        errorMessage = "";
        username = "";
        password = "";
        try
        {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }

    private void PerformRegister()
    {
        NavigationManager.NavigateTo("/register");
    }

}